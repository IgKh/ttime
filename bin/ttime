#!/usr/bin/env ruby

require 'pathname'
require 'optparse'

$LOAD_PATH.unshift((Pathname.new($0).dirname.parent + 'lib').to_s)

require 'ttime/version'
require 'ttime/logging'

include TTime::Logging

action = :run_gui

OptionParser.new do |opts|
  opts.on("--win32-hack", "Hack for win32 compatibility") do
    ENV["HOME"] = File::dirname($0)
  end

  opts.on("--output-xml", "Write UDonkey-compatible XML (to stdout)") do
    action = :output_xml
  end

  opts.on("--repy-utf8", "Write a UTF-8 recoded REPY") do
    action = :repy_utf8
  end

  opts.on("--version", "Print version number and exit") do
    puts TTime::Version
    exit 0
  end

  opts.on("-v", "--verbose", "Increase verbosity") do
    log.level -= 1
  end
end.parse!

begin
  require 'gettext'
  include GetText
rescue LoadError
  def _ s; s; end
end

# Standard unicode support activation (built-in in 1.9)
ver = RUBY_VERSION.split('.').collect { |p| p.to_i }
if ver[0] <= 1 and ver[1] < 9 then
  require 'jcode'
  $KCODE = 'u'
end

def run_gui
  require 'ttime/gui/main_window'

  Thread.abort_on_exception = true

  log.debug { "Initializing GTK" }
  Gtk.init
  log.debug { "Initializing main window" }

  Gtk.init_add do
    a = TTime::GUI::MainWindow.instance
  end

  log.debug { "Entering mainloop" }
  Gtk.main_with_queue
end

def output_xml
  require 'ttime/data'

  oldmsg = ""
  data = TTime::Data.new(:convert) do |msg,_|
    log.info msg if msg != oldmsg
    oldmsg = msg
  end

  require 'ttime/parse/udonkey_xml'
  TTime::Parse::UDonkeyXML.output_xml data.data
end

def repy_utf8
  require 'ttime/data'

  oldmsg = ""
  data = TTime::Data.new(:output_unicode) do |msg,_|
    log.info msg if msg != oldmsg
    oldmsg = msg
  end
end

self.send(action)
